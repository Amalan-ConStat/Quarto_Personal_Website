{
  "hash": "7ab717ba7ca7898b181b3fc347fe8f5e",
  "result": {
    "markdown": "---\ntitle: 'Extract Presidential Election Data of 2015 from the Pdf file '\ndate: '2019-07-14'\ncategories:\n  - SL Election\n  - Presidential Election\nimage: featured.png\ndraft: false\nnumber-sections: false\nformat:\n  html:\n    fig-cap-location: bottom\nresources: \n  - \"featured.png\"\n---\n\n\n# What I am going to do and Why ?\n\nSri Lanka will face a presidential election by the end of this year, but in order to understand how people \nhave voted so far in previous elections we need data. I was hoping this data could be in \n[opendata](http://www.data.gov.lk/search/type/dataset?query=election) initiative website, unfortunately I\nwas not happy with the results. Only one set of data was presented here, which was for District Registered \nElectors from 2007 - 2017. \n\n## Where is the data !\n\nWell I did not give up, because there is the Elections Commission website. Hopefully, I found the data which \nwas needed under the title \n[Presidential Election Results.](https://elections.gov.lk/web/en/elections/elections-results/presidential-elections-results/)\nStill there is an issue where all the election results are in pdf files. Each pdf file had data of each presidential election.\nAfter skimming through these six election results in pdf files it was clear that not all of them have the same \nformat or pattern in representing the data. But this will not be an issue if we had the data in a csv or excel file\nwhich could be useful for researchers or investigative journalists.\n\nSo my knowledge as an R programmer will come in handy for extracting tables from these pdfs. Also this blog post is \nabout extracting data from the pdf file of Presidential Election results in 2015. I will be using the packages *pdftools*,\n*stringr*, *data.table* and *splitstackshape*.  \n\n# Simplifying and Solving\n\n*pdftools* to extract information from pdf files, *stringr* for string manipulation such as identify, remove or match\npatterns, *data.table* to create the data-set, finally *splitstackshape* for critical column and row manipulation using \npatterns in text. These packages are much useful in creating one strong data-set of Presidential Election results from \nyear 2015.\n\nIn a presidential election all contestants are voted from all electorates through out the country, therefore in all\ntables the information looks the same. This same type of information is the contestants names, valid votes, rejected votes,\ntotal polled and registered electors. So extracting data is much more easier in a presidential election than a parliament\nelection. This year 2015 presidential election pdf file of 111 pages can be classified in-to three groups based on pages.\n\nFirst group includes pages 1 and 111 where no data needs to be extracted. Second group is for pages which has only one table,\nFinal group is with pages which have two tables per page(which is a lot). Small note is that a new district result begins in\na new page that is why we have pages with one table. Main heading is district name but only on top of the page, secondary\nheading is Electorate name for each table, but this is not the case for all tables. There are three types of tables, which\nare tables for electorate votes, district postal votes and final district results. Below are figures of proof. \n\n## Page types\n\n![No Info](SLelection/Presidential_Election/screenshots/PT1.JPG)\n\n![Two Tables](SLelection/Presidential_Election/screenshots/PT2.JPG)\n\n![One Table](SLelection/Presidential_Election/screenshots/PT3.JPG)\n\n## Table types\n\n![Two Electorate Results](SLelection/Presidential_Election/screenshots/TT1.JPG)\n\n![One Electorate and Postal Votes](SLelection/Presidential_Election/screenshots/TT2.JPG)\n\n![Postal Votes and Final District Results](SLelection/Presidential_Election/screenshots/TT3.JPG)\n\n![Final District Results only](SLelection/Presidential_Election/screenshots/TT4.JPG)\n\nSo from these tables only we need to extract information and create one large data-set. \n\n# Programming Part\n\nI shall divide the data extraction in-to two parts, first extract data from two table pages and next\nextract data from one table pages. For these two situations I will develop two functions. Both functions\nare similar except for the part with number of tables. \n\nI shall only discuss the two table situation here(but will include code for one table extraction). \n\n## Step 1\n\nUsing the pdf_text function on the pdf file we will produce a character class output where each page is represented by a\nlist(so 111 lists in this one output). Now consider one list which represents a page but it is still one line character.\nConvert this one line character into a multiple row list using str_split function and *\\n* pattern. So for the first \ntable the information is from row 4 to 26 and second table data is from row 29 to 51. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the packages \nlibrary(pdftools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing poppler version 22.04.0\n```\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(splitstackshape)\nlibrary(data.table)\n\n# load the file \nSL_PE_2015<-pdf_text(\"PresidentialElections2015.pdf\")\n\npage<-2\n\n# split the one large list into a data frame of lines and separate them into two tables\ntable1<-data.table(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][4:26])\ntable2<-data.table(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][29:51])\n\n# name the only column in these two data tables\nnames(table1)<-\"hello\"\nnames(table2)<-\"hello\"\n```\n:::\n\n\n![](SLelection/Presidential_Election/screenshots/Step1.JPG)\n\nNow we have two one column data-frames with exact rows as the page of the pdf file we are extracting.\n\n## Step 2 \n\nBeginning information in these two tables contain the same information as mentioned earlier. So after removing\nthis information we will be limited to another one column data-table but now only with votes and percentage values. \nThis one column table can be separated by column splitting based on the pattern \" \". \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating the list with same type of information\nNames=c(\"Aithurus Mohamed Illias\",\"Ibrahim Miflar\",\"Prasanna Priyankara\",\n        \"Wimal Geeganage\",\"Sirithunga Jayasuriya\",\"M. B. Theminimulla\",\n        \"Pani Wijesiriwardane\",\"Duminda Nagamuwa\",\n        \"Panagoda Don Prince Soloman Anura Liyanage\",\n        \"Maithripala Sirisena\",\"Ruwanthilaka Peduru Arachchi\",\n        \"Anuruddha Polgampala\",\"Baththaramulle Seelarathana Thero\",\n        \"Sarath Manamendra\",\"Arachchige Rathnayaka Sirisena\",\n        \"Mahinda Rajapaksa\",\"Namal Rajapaksa\",\"Sundaram Mahendran\",\n        \"Jayantha Kulathunga\",\"Valid Votes\",\"Rejected Votes\",\n        \"Total Polled\",\"Regis.Electors\")\n\n# first using the above list remove the first column info\n# then split all rows of one column into two columns based on \" \" pattern\nTop<-cSplit(lapply(table1, function(x) str_remove(x,Names)),\"hello\",\" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n```{.r .cell-code}\nBottom<-cSplit(lapply(table2, function(x) str_remove(x,Names)),\"hello\",\" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n```{.r .cell-code}\n# Extract the information of sub heading above each table by removing the pattern \"\\r\"\nName1<-str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][2],\"\\r\")\nName2<-str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][27],\"\\r\")\n```\n:::\n\n\n![](SLelection/Presidential_Election/screenshots/Step2.JPG)\n\n## Step 3\n\nNow create a proper table with three columns which has that same type of information, votes(with commas) and percentages\n(with percentage sign). Well by creating these Top1 and Bottom1 tables we will remove the percentage sign. Then \nwe will remove the commas(,) in votes columns and convert them into numeric class. Further, even though the percentage \ncolumn looks numeric it is not. To resolve it we shall convert these values also from factor to character and then finally \nto numeric. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating the new dataset with three columns without percentage sign\nTop1<-data.table(\"ColumnNames\"=Names,\"Votes\"=Top$hello_1,\"Percentage\"=str_remove(Top$hello_2,\"%\"))\nBottom1<-data.table(\"ColumnNames\"=Names,\"Votes\"=Bottom$hello_1,\"Percentage\"=str_remove(Bottom$hello_2,\"%\"))\n\n# remove the commas from votes columns and convert them to numeric class\nTop1[,2] <- lapply(Top1[,2], function(x) as.numeric(as.character(str_remove_all(x,\",\"))))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\nBottom1[,2] <- lapply(Bottom1[,2], function(x) as.numeric(as.character(str_remove_all(x,\",\"))))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\n# convert the percentage values to numeric class\nTop1[,3]<-lapply(Top1[,3], function(x) as.numeric(as.character(x)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\nBottom1[,3]<-lapply(Bottom1[,3], function(x) as.numeric(as.character(x)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n:::\n\n\n![](SLelection/Presidential_Election/screenshots/Step3.JPG)\n\n## Step 4\n\nNow our final tables are prepared. We shall name the columns. First column is for year,\nsecond column is for district name, third column is for that same type of information,\nfourth column is for number of votes and final column is for the percentage values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nElectorate1<-data.table(\"Year\"=2015,\n                        \"District\"=str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][1],\n                                                          \" Districts Results\\r\"), \n                        \"Electorate\"=Name1,\"ColNames\"=Top1$ColumnNames,\"Votes\"=Top1$Votes,\n                        \"Percentage\"=Top1$Percentage)\nElectorate2<-data.table(\"Year\"=2015,\n                        \"District\"=str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][1],\n                                                          \" Districts Results\\r\"),\n                        \"Electorate\"=Name2,\"ColNames\"=Bottom1$ColumnNames,\"Votes\"=Bottom1$Votes,\n                        \"Percentage\"=Bottom1$Percentage)\n```\n:::\n\n\nFinally, we have extracted two clear tables under the name Electorate1 and Electorate2. First three table types \nmentioned above can be extracted now. \n\n![](SLelection/Presidential_Election/screenshots/Step4.JPG)\n\n# One Complete Function\n\nCombining the above 4 steps we can create one function where the input is page number and the resultant\nwill be a data-table of one page information but of two tables in the pdf file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nExtract_twotable<-function(page)\n{\ntable1<-data.table(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][4:26])\ntable2<-data.table(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][29:51])\n\nnames(table1)<-\"hello\"\nnames(table2)<-\"hello\"\n\nNames=c(\"Aithurus Mohamed Illias\",\"Ibrahim Miflar\",\"Prasanna Priyankara\",\n        \"Wimal Geeganage\",\"Sirithunga Jayasuriya\",\"M. B. Theminimulla\",\n        \"Pani Wijesiriwardane\",\"Duminda Nagamuwa\",\n        \"Panagoda Don Prince Soloman Anura Liyanage\",\n        \"Maithripala Sirisena\",\"Ruwanthilaka Peduru Arachchi\",\n        \"Anuruddha Polgampala\",\"Baththaramulle Seelarathana Thero\",\n        \"Sarath Manamendra\",\"Arachchige Rathnayaka Sirisena\",\n        \"Mahinda Rajapaksa\",\"Namal Rajapaksa\",\"Sundaram Mahendran\",\n        \"Jayantha Kulathunga\",\"Valid Votes\",\"Rejected Votes\",\n        \"Total Polled\",\"Regis.Electors\")\n\nTop<-cSplit(lapply(table1, function(x) str_remove(x,Names)),\"hello\",\" \")\nBottom<-cSplit(lapply(table2, function(x) str_remove(x,Names)),\"hello\",\" \")\n\nName1<-str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][2],\"\\r\")\nName2<-str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][27],\"\\r\")\n\nTop1<-data.table(\"ColumnNames\"=Names,\"Votes\"=Top$hello_1,\"Percentage\"=str_remove(Top$hello_2,\"%\"))\nBottom1<-data.table(\"ColumnNames\"=Names,\"Votes\"=Bottom$hello_1,\"Percentage\"=str_remove(Bottom$hello_2,\"%\"))\n\nTop1[,2] <- lapply(Top1[,2], function(x) as.numeric(as.character(str_remove_all(x,\",\"))))\nBottom1[,2] <- lapply(Bottom1[,2], function(x) as.numeric(as.character(str_remove_all(x,\",\"))))\n\nTop1[,3]<-lapply(Top1[,3], function(x) as.numeric(as.character(x)))\nBottom1[,3]<-lapply(Bottom1[,3], function(x) as.numeric(as.character(x)))\n\nElectorate1<-data.table(\"Year\"=2015,\n                        \"District\"=str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][1],\n                                                          \" Districts Results\\r\"), \n                        \"Electorate\"=Name1,\"ColNames\"=Top1$ColumnNames,\"Votes\"=Top1$Votes,\n                        \"Percentage\"=Top1$Percentage)\nElectorate2<-data.table(\"Year\"=2015,\n                        \"District\"=str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][1],\n                                                          \" Districts Results\\r\"),\n                        \"Electorate\"=Name2,\"ColNames\"=Bottom1$ColumnNames,\"Votes\"=Bottom1$Votes,\n                        \"Percentage\"=Bottom1$Percentage)\n\noutput<-rbind2(Electorate1,Electorate2)\n\nreturn(output)\n}\n```\n:::\n\n\nAfter developing such a function and naming it as *Extract_twotable()*, it now possible to extract\ndata from more than 90 pages in the Presidential election 2015 pdf file. \n\n# Using the One Function to extract Data from Multiple pages\n\nIn order to do the above extraction first we have to identify the pages which have only\none table and then deselect them. After this with the help of a for loop we can create \na long list of elements. Where each element is a table, and that table from one page.\nBelow is the code for that solution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# page numbers from 1 to 111\npages<-c(1:111)\n\n# removing pages with only one tables\npages<-pages[-c(1,10,18,31,48,58,61,64,70,82,87,90,96,99,110,111)]\n\n# creating an empty data-frame\ndatas<-NULL\n\n# creating the large data frame after extracting two tables \nfor (i in pages) \n        {\n        # two tables of each page is considered as a list element\n        datas[[i]]<-Extract_twotable(i)        \n        }\n\n# combining the multiple list data-frame as one data-frame\nout1<-do.call(\"rbind\",datas)\n```\n:::\n\n\n![](SLelection/Presidential_Election/screenshots/output1.JPG)\n\nAfter this large extraction similarly we have to write a function for one table pages also. \nBelow is the code chunk for that. Here we create a function called *Extract_onetable()*\nsimilar as before where the input is page-number. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nExtract_onetable<-function(page)\n{\ntable1<-data.table(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][4:26])\n\nnames(table1)<-\"hello\"\n\nNames=c(\"Aithurus Mohamed Illias\",\"Ibrahim Miflar\",\"Prasanna Priyankara\",\n        \"Wimal Geeganage\",\"Sirithunga Jayasuriya\",\"M. B. Theminimulla\",\n        \"Pani Wijesiriwardane\",\"Duminda Nagamuwa\",\n        \"Panagoda Don Prince Soloman Anura Liyanage\",\n        \"Maithripala Sirisena\",\"Ruwanthilaka Peduru Arachchi\",\n        \"Anuruddha Polgampala\",\"Baththaramulle Seelarathana Thero\",\n        \"Sarath Manamendra\",\"Arachchige Rathnayaka Sirisena\",\n        \"Mahinda Rajapaksa\",\"Namal Rajapaksa\",\"Sundaram Mahendran\",\n        \"Jayantha Kulathunga\",\"Valid Votes\",\"Rejected Votes\",\n        \"Total Polled\",\"Regis.Electors\")\n\nTop<-cSplit(lapply(table1, function(x) str_remove(x,Names)),\"hello\",\" \")\n\nName1<-str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][2],\"\\r\")\n\nTop1<-data.table(\"ColumnNames\"=Names,\"Votes\"=Top$hello_1,\"Percentage\"=str_remove(Top$hello_2,\"%\"))\n\nTop1[,2] <- lapply(Top1[,2], function(x) as.numeric(as.character(str_remove_all(x,\",\"))))\n\nTop1[,3]<-lapply(Top1[,3], function(x) as.numeric(as.character(x)))\n\nElectorate1<-data.table(\"Year\"=2015,\n                        \"District\"=str_remove(str_split(SL_PE_2015[[page]],\"\\n\")[[1]][1],\n                                                          \" Districts Results\\r\"), \n                        \"Electorate\"=Name1,\"ColNames\"=Top1$ColumnNames,\"Votes\"=Top1$Votes,\n                        \"Percentage\"=Top1$Percentage)\n\noutput<-Electorate1\n\nreturn(output)\n}\n```\n:::\n\n\nAfter creating this function we focus only on the pages with one tables. Below is \nhow we extract information from such pages and create a large data-frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list of pages with only one tables\npages<-c(10,18,31,48,58,61,64,70,82,87,90,96,99,110)\n\n# creating an empty data-frame\ndatas1<-NULL\n\n# creating the large data frame after extracting one table \nfor (i in pages) \n        {\n        # one table of each page is considered as a list element\n        datas1[[i]]<-Extract_onetable(i)        \n        }\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n\nWarning in type.convert.default(X[[i]], ...): 'as.is' should be specified by\nthe caller; using TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n\nWarning in FUN(X[[i]], ...): NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\n# combining the multiple list data-frame as one data-frame\nout2<-do.call(\"rbind\",datas1)\n```\n:::\n\n\n![](SLelection/Presidential_Election/screenshots/output2.JPG)\n\nNow we have two data-frames which are named as out1 and out2 which \nneeds to be combined based on rows. The combined data-frame is called\nElection2015 which has all the information of Presidential Election 2015 \npdf file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# final data frame which has information from the entire pdf\n# which means combining the out1 and out2 data-frames\nElection2015<-rbind(out1,out2)\n```\n:::\n\n\n![](SLelection/Presidential_Election/screenshots/Election2015.JPG)\n\n# Validating the Data\n\nEven though I claim the data extraction is complete there needs to be validation. I find that\nit will be reassuring to have some form of validation. Therefore the best way is to tally the votes \nin individual districts and compare them with the final vote(which is on the last page of the pdf file).\nI shall focus on the contestants Maithripala Sirisena, Mahinda Rajapaksa and data such as Valid Votes, Rejected \nvotes and Total Polled. Below is the code to find those final votes which will be compared with the pdf file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# validating final votes of Maithripala Sirisena\nElecFinal2015<-subset(Election2015,Electorate==\"Final District Votes\" & ColNames==\"Maithripala Sirisena\" |\n                                   Electorate==\"Final District Result\" & ColNames==\"Maithripala Sirisena\")\nElecFinal2015[,sum(Votes),by=\"ColNames\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               ColNames      V1\n1: Maithripala Sirisena 4014047\n```\n:::\n\n```{.r .cell-code}\nsum(ElecFinal2015$Votes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4014047\n```\n:::\n\n```{.r .cell-code}\n# validating final votes of Mahinda Rajapaksa\nElecFinal2015<-subset(Election2015,Electorate==\"Final District Votes\" & ColNames==\"Mahinda Rajapaksa\" |\n                              Electorate==\"Final District Result\" & ColNames==\"Mahinda Rajapaksa\")\nElecFinal2015[,sum(Votes),by=\"ColNames\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            ColNames      V1\n1: Mahinda Rajapaksa 3390612\n```\n:::\n\n```{.r .cell-code}\nsum(ElecFinal2015$Votes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3390612\n```\n:::\n\n```{.r .cell-code}\n# validating final votes of valid votes\nElecFinal2015<-subset(Election2015,Electorate==\"Final District Votes\" & ColNames==\"Valid Votes\" |\n                              Electorate==\"Final District Result\" & ColNames==\"Valid Votes\")\nElecFinal2015[,sum(Votes),by=\"ColNames\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ColNames V1\n1: Valid Votes NA\n```\n:::\n\n```{.r .cell-code}\nsum(ElecFinal2015$Votes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# validating final votes of rejected votes\nElecFinal2015<-subset(Election2015,Electorate==\"Final District Votes\" & ColNames==\"Rejected Votes\" |\n                              Electorate==\"Final District Result\" & ColNames==\"Rejected Votes\")\nElecFinal2015[,sum(Votes),by=\"ColNames\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         ColNames V1\n1: Rejected Votes NA\n```\n:::\n\n```{.r .cell-code}\nsum(ElecFinal2015$Votes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n# validating final votes of polled votes\nElecFinal2015<-subset(Election2015,Electorate==\"Final District Votes\" & ColNames==\"Total Polled\" |\n                              Electorate==\"Final District Result\" & ColNames==\"Total Polled\")\nElecFinal2015[,sum(Votes),by=\"ColNames\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       ColNames V1\n1: Total Polled NA\n```\n:::\n\n```{.r .cell-code}\nsum(ElecFinal2015$Votes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nIf we compare the above results with below table clearly our extraction is successful and the amounts are \naccurate.\n\n![](SLelection/Presidential_Election/screenshots/validate.JPG)\n\n# Issues in the pdf file\n\nSatisfying end to be honest, but there was one glitch. If we consider the final district result tables\nonly in one occasion the heading was inconsistent. This occurred for the Kalutara district, it should have\nbeen \"Final District Result\" instead of \"Final District Votes\". Rather than that no issues at all. Similarly\nif we identify some creative pattern step by step it is possible to extract all the presidential election data\nand create a much more lucrative data retrieval website. Well we could even add the parliament and provincial election\nresults as well. \n\nFor now One step at a time. \n\n**THANK YOU**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}