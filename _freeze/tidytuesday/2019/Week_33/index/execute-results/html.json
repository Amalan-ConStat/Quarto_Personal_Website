{
  "hash": "cf833d59eb8f4bfac0d68c88daf3ca39",
  "result": {
    "markdown": "---\ntitle: 'Week 33: Roman Emperors'\ndate: '2019-08-13'\ncategories:\n  - TidyTuesday\n  - 2019\nimage: featured.png\ndraft: false\nnumber-sections: false\nformat:\n  html:\n    fig-cap-location: bottom\nresources: \n  - \"featured.png\"\n---\n\n\n\n\nThis is a very small data frame, which is with 68 observations and 16 variables. Several plots were\ngenerated but main focus was on using the 'ggpol' package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the data\nemperors <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-08-13/emperors.csv\")\n\n# load packages\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggpol)\n\n# load theme package\nlibrary(ggthemr)\nggthemr(\"flat\")\n```\n:::\n\n\n[GitHub Code](https://github.com/Amalan-ConStat/TidyTuesday/tree/master/2019/Week33)\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n{{% tweet \"1161214486012993536\" %}}\n```\n:::\n:::\n\n\n# Birth Province\n\nInitial plots were generated for Birth Province with mostly other categorical variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  group_by(birth_prv) %>%\n  count(sort = TRUE) %>%\n  ggplot(.,aes(birth_prv,n,label=n))+geom_col()+\n  xlab(\"Birth Province\")+ylab(\"Frequency\")+geom_text(vjust=1)+\n  ggtitle(\"Which Birth Province has produced more Emperors?\")+\n  theme(axis.text.x = element_text(angle=30,hjust=1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Birth Pro vs Count-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(emperors ,aes(stringr::str_wrap(birth_prv,12),stringr::str_wrap(rise,15),color=era))+\n  geom_jitter(shape=15)+xlab(\"Birth Province\")+ylab(\"Risen to Power\")+\n  ggtitle(\"Does Birth Province has any affect in coming to Power?\")+\n  theme(axis.text.x = element_text(angle=30,hjust=1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Birth Pro vs rise-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  mutate(reign_time=reign_end-reign_start) %>%\nggplot(.,aes(stringr::str_wrap(birth_prv,12),abs(reign_time),color=era))+\n  geom_jitter(shape=15)+\n  xlab(\"Birth Province\")+ylab(\"Days in Power\")+\n  ggtitle(\"Days in Power vs Birth Province\")+\n  theme(axis.text.x = element_text(angle=30,hjust=1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Birth Pro vs Time-1.png){width=1152}\n:::\n:::\n\n\n# Reign Time\n\nSecond set of plots are based on Reign Time or Time in Power with few other\ncategorical variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  mutate(reign_time=reign_end-reign_start) %>%\nggplot(.,aes(stringr::str_wrap(rise,12),abs(reign_time),color=era))+\n  ggtitle(\"Type of technique getting to power vs Days in Power\")+\n  geom_jitter(shape=15)+\n  xlab(\"Rise\")+ylab(\"Days in Power\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Reign Time vs Rise-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  mutate(reign_time=reign_end-reign_start) %>%\nggplot(.,aes(stringr::str_wrap(cause,12),abs(reign_time),color=era))+\n  geom_jitter(shape=15)+\n  ggtitle(\"Type of Death vs Days in Power\")+\n  xlab(\"Cause\")+ylab(\"Days in Power\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Reign Time vs Cause-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  mutate(reign_time=reign_end-reign_start) %>%\nggplot(.,aes(stringr::str_wrap(dynasty,12),abs(reign_time),color=era))+\n  ggtitle(\"Type of Dynasty vs Days in Power\")+\n  geom_jitter(shape=15)+\n  xlab(\"Dynasty\")+ylab(\"Days in Power\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Reign Time vs Dynasty-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  mutate(reign_time=reign_end-reign_start) %>%\nggplot(.,aes(stringr::str_wrap(era,12),abs(reign_time),color=dynasty))+\n  ggtitle(\"Type of Era vs Days in Power\")+\n  geom_jitter(shape=15)+\n  xlab(\"Era\")+ylab(\"Days in Power\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Reign Time vs Era-1.png){width=1152}\n:::\n:::\n\n\n# Cause and Killer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(emperors,aes(cause,killer,color=era))+geom_jitter(shape=15)+\n    xlab(\"Cause\")+ylab(\"Killer\")+\n    ggtitle(\"Type of Death vs Main Reason to Death\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cause and killer-1.png){width=1152}\n:::\n:::\n\n\n# Days in Power vs Days Alive\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemperors %>%\n  mutate(reign_time=reign_end-reign_start) %>%\n  mutate(alive_time=death-birth) %>%\nggplot(.,aes(abs(alive_time/365),abs(reign_time/365),color=era))+geom_point(shape=15)+\n    xlab(\"Years Alive\")+ylab(\"Years in Power\")+\n    ggtitle(\"Does being alive has any effect on being in power?\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Days in Power vs Days Alive-1.png){width=1152}\n:::\n:::\n\n\n# Using ggpol package\n\nggpol package is used to plot parliament data. Thankfully, we can \nsummary the data and produce the plots as below. \n\n## Era\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character to factor type\nemperors$era<-factor(emperors$era)\n\nemperors %>%\n  count(era) %>%\nggplot(.) + \n  geom_parliament(aes(seats = n, fill = era)) + \n  scale_fill_manual(values=c(\"red\",\"yellow\"),labels = unique(emperors$era))+\n  ggtitle(\"Count based on Era\")+\n  coord_fixed() + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Era-1.png){width=1152}\n:::\n:::\n\n\n## Risen to Power\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character to factor type\nemperors$rise<-factor(emperors$rise)\n\nemperors %>%\n  count(rise) %>%\nggplot(.) + \n  geom_parliament(aes(seats = n, fill = rise)) + \n  scale_fill_manual(values=blues9,labels = unique(emperors$rise))+\n  coord_fixed() + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Rise-1.png){width=1152}\n:::\n:::\n\n\n## Cause of Death\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character to factor type\nemperors$cause<-factor(emperors$cause)\n\nemperors %>%\n  count(cause) %>%\nggplot(.) + \n  geom_parliament(aes(seats = n, fill = cause)) + \n  scale_fill_manual(values=blues9,labels = unique(emperors$cause))+\n  coord_fixed() + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Cause-1.png){width=1152}\n:::\n:::\n\n\n## Killer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character to factor type\nemperors$killer<-factor(emperors$killer)\n\nemperors %>%\n  count(killer) %>%\nggplot(.) + \n  geom_parliament(aes(seats = n, fill = killer)) + \n  scale_fill_manual(values=c(blues9,\"red\",\"yellow\",\"green\",\"grey\",\"black\"),\n                    labels = unique(emperors$killer))+\n  coord_fixed() + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Killer-1.png){width=1152}\n:::\n:::\n\n\n## Dynasty\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character to factor type\nemperors$dynasty<-factor(emperors$dynasty)\n\nemperors %>%\n  count(dynasty) %>%\nggplot(.) + \n  geom_parliament(aes(seats = n, fill = dynasty)) + \n  scale_fill_manual(values=blues9,labels = unique(emperors$dynasty))+\n  coord_fixed() + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Dynasty-1.png){width=1152}\n:::\n:::\n\n\nThe 'ggpol' plots seem fine, to be fair they would be much more cool if we \nhave a proper color palette. Also it would make more sense if the number of \nobservations are higher also but not above 500. Rather than that it looks \nfine.\n\n*THANK YOU*\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}